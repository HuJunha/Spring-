事务操作（声明式事务管理参数配置）

	1.在service类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数
	
	2.propagation：事务传播行为
		事务方法：对数据库表数据进行变化的操作
		（1）多事务方法直接进行调用，这个过程中事务是如何进行管理的
			场景：
				@Transactional
				public void add( ){	                                            public  void update( ){
				update( );//调用update方法					}	
}
		spring框架事务传播行为有7种
			REQUIRED:如果add方法本身有事务，调用update方法之后，update使用当前add方法里面的事务
				如果add方法本身没有事务，调用update方法之后，创建新事务
			
			REQUIRED_NEW:使用add方法调用update方法，调用update方法之后，创建新事务


		使用举例：@Transactional（propagation = Propagation.REQUIRED）//默认情况下都是REQUIRED
	3.ioslation：事务隔离级别
		（1）事务有特性成为隔离性，多事务操作之间不会产生影响，不考虑隔离性产生很多问题
		（2）有三个读问题：脏读，不可重复读，虚(幻)读
		（3）脏读：一个未提交事务读取到另一个未提交事务的数据
		（4）不可重复读：一个未提交事务读取到另一提交事务修改数据
		（5）虚读：一个未提交事务读取到另一提交事务添加数据
		（6）通过设置事务隔离性，解决读问题
			READ UNCOMMITTED（读未提交）:脏读，不可重复读，幻读都不能解决
			READ COMMITTED（读已提交）:解决脏读，但不能解决不可重复读，幻读
			REPEATABLEREAD（可重复读）:解决脏读，可重复读，不能解决幻读  //mysql默认使用的隔离级别
			SERIALIZABLE（串行化）:脏读，不可重复读，幻读都能解决
			
		使用举例：@Transactional(propagation = Propagation.REQUIRED  isolation = Isolation.REPEATABLE READ)//
	4.timeout：超时时间
		（1）：事务需要在一定时间内进行提交，如果不提交进行回滚
		（2）：默认值是-1，设置时间以秒为单位进行计算


	5.readOnly：是否只读
		（1）读：查询操作，写：添加修改删除操作
		（2）readOnly默认值是false，表示可以查询，可以添加修改删除操作
			设置readOnly值是true，设置成true，只能查询

	6.rollbackFor：回滚
		（1）设置查询哪些异常进行事务回滚

	7.noRollbackFor：不回滚
		（1）设置出现哪些异常不就行事务回滚

	